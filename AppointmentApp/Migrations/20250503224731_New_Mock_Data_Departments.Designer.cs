// <auto-generated />
using System;
using AppointmentApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503224731_New_Mock_Data_Departments")]
    partial class New_Mock_Data_Departments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("AppointmentApp.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AppointmentApp.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dahiliye"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Göz"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ortopedi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nöroloji"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Kulak Burun Boğaz"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Üroloji"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dermatoloji"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Psikiyatri"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Genel Cerrahi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Kadın Doğum"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pediatri (Çocuk)"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Endokrinoloji"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Göğüs Hastalıkları"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Enfeksiyon Hastalıkları"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Gastroenteroloji"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Radyoloji"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Anestezi"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Hematoloji"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Onkoloji"
                        });
                });

            modelBuilder.Entity("AppointmentApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "123",
                            Role = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Password = "456",
                            Role = 1,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("AppointmentApp.Models.Appointment", b =>
                {
                    b.HasOne("AppointmentApp.Models.Department", "Department")
                        .WithMany("Appointments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentApp.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppointmentApp.Models.Department", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("AppointmentApp.Models.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
